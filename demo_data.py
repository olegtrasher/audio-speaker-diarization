# -*- coding: utf-8 -*-
import pandas as pd
import numpy as np
import os
from pathlib import Path
import matplotlib.pyplot as plt
import soundfile as sf
from config import Config

class DemoDataGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    @staticmethod
    def create_demo_diarization_results() -> pd.DataFrame:
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏"""
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–∏–∞–ª–æ–≥ –º–µ–∂–¥—É —Ç—Ä–µ–º—è —Å–ø–∏–∫–µ—Ä–∞–º–∏
        demo_data = [
            {'Speaker': 'SPEAKER_00', 'Start (sec)': 0.0, 'End (sec)': 3.5, 'Duration (sec)': 3.5},
            {'Speaker': 'SPEAKER_01', 'Start (sec)': 3.8, 'End (sec)': 8.2, 'Duration (sec)': 4.4},
            {'Speaker': 'SPEAKER_00', 'Start (sec)': 8.5, 'End (sec)': 12.1, 'Duration (sec)': 3.6},
            {'Speaker': 'SPEAKER_02', 'Start (sec)': 12.4, 'End (sec)': 16.8, 'Duration (sec)': 4.4},
            {'Speaker': 'SPEAKER_01', 'Start (sec)': 17.1, 'End (sec)': 20.5, 'Duration (sec)': 3.4},
            {'Speaker': 'SPEAKER_00', 'Start (sec)': 20.8, 'End (sec)': 25.2, 'Duration (sec)': 4.4},
            {'Speaker': 'SPEAKER_02', 'Start (sec)': 25.5, 'End (sec)': 28.9, 'Duration (sec)': 3.4},
            {'Speaker': 'SPEAKER_01', 'Start (sec)': 29.2, 'End (sec)': 33.6, 'Duration (sec)': 4.4},
            {'Speaker': 'SPEAKER_00', 'Start (sec)': 33.9, 'End (sec)': 37.3, 'Duration (sec)': 3.4},
            {'Speaker': 'SPEAKER_02', 'Start (sec)': 37.6, 'End (sec)': 42.0, 'Duration (sec)': 4.4},
        ]
        
        df = pd.DataFrame(demo_data)
        return df
    
    @staticmethod
    def create_demo_audio_file(output_path: str, duration: float = 45.0, sample_rate: int = 16000):
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞"""
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Å–∏–Ω—É—Å–æ–∏–¥–∞–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª
        t = np.linspace(0, duration, int(sample_rate * duration))
        
        # –°–æ–∑–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª —Å —Ä–∞–∑–Ω—ã–º–∏ —á–∞—Å—Ç–æ—Ç–∞–º–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö "—Å–ø–∏–∫–µ—Ä–æ–≤"
        frequency_base = 440  # –ë–∞–∑–æ–≤–∞—è —á–∞—Å—Ç–æ—Ç–∞ (A4)
        signal = np.zeros_like(t)
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–µ—á—å —Ä–∞–∑–Ω—ã—Ö —Å–ø–∏–∫–µ—Ä–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ —á–∞—Å—Ç–æ—Ç–∞–º–∏
        segments = [
            (0.0, 3.5, 440),    # SPEAKER_00 - A4
            (3.8, 8.2, 523),    # SPEAKER_01 - C5
            (8.5, 12.1, 440),   # SPEAKER_00 - A4
            (12.4, 16.8, 659),  # SPEAKER_02 - E5
            (17.1, 20.5, 523),  # SPEAKER_01 - C5
            (20.8, 25.2, 440),  # SPEAKER_00 - A4
            (25.5, 28.9, 659),  # SPEAKER_02 - E5
            (29.2, 33.6, 523),  # SPEAKER_01 - C5
            (33.9, 37.3, 440),  # SPEAKER_00 - A4
            (37.6, 42.0, 659),  # SPEAKER_02 - E5
        ]
        
        for start, end, freq in segments:
            start_idx = int(start * sample_rate)
            end_idx = int(end * sample_rate)
            
            # –°–æ–∑–¥–∞–µ–º –º–æ–¥—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —Ä–µ—á–∏
            segment_t = t[start_idx:end_idx]
            amplitude = 0.3 * np.sin(2 * np.pi * freq * segment_t)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥—É–ª—è—Ü–∏—é –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —Ä–µ—á–∏
            modulation = 0.5 + 0.5 * np.sin(2 * np.pi * 10 * segment_t)
            signal[start_idx:end_idx] = amplitude * modulation
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–π —à—É–º
        noise = np.random.normal(0, 0.01, len(signal))
        signal = signal + noise
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å–∏–≥–Ω–∞–ª
        signal = signal / np.max(np.abs(signal)) * 0.8
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ WAV —Ñ–∞–π–ª
        sf.write(output_path, signal, sample_rate)
        
        print(f"–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {output_path}")
        print(f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} —Å–µ–∫—É–Ω–¥")
        print(f"–ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏: {sample_rate} –ì—Ü")
    
    @staticmethod
    def export_demo_results(df: pd.DataFrame, output_dir: str):
        """–≠–∫—Å–ø–æ—Ä—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ñ–∞–π–ª—ã"""
        
        # CSV —Ñ–∞–π–ª
        csv_path = os.path.join(output_dir, "demo_diarization_results.csv")
        df.to_csv(csv_path, index=False, encoding='utf-8')
        
        # Excel —Ñ–∞–π–ª
        excel_path = os.path.join(output_dir, "demo_diarization_results.xlsx")
        df.to_excel(excel_path, index=False)
        
        print(f"–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã:")
        print(f"- CSV: {csv_path}")
        print(f"- Excel: {excel_path}")
    
    @staticmethod
    def create_demo_visualization(df: pd.DataFrame, output_dir: str):
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏"""
        
        plt.figure(figsize=(12, 6))
        
        # –¶–≤–µ—Ç–∞ –¥–ª—è —Å–ø–∏–∫–µ—Ä–æ–≤
        colors = {'SPEAKER_00': '#FF6B6B', 'SPEAKER_01': '#4ECDC4', 'SPEAKER_02': '#45B7D1'}
        
        for _, row in df.iterrows():
            plt.barh(
                row['Speaker'], 
                row['Duration (sec)'], 
                left=row['Start (sec)'], 
                color=colors.get(row['Speaker'], '#95A5A6'),
                alpha=0.8,
                edgecolor='black',
                linewidth=0.5
            )
        
        plt.xlabel('–í—Ä–µ–º—è (—Å–µ–∫—É–Ω–¥—ã)')
        plt.ylabel('–°–ø–∏–∫–µ—Ä')
        plt.title('–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏')
        plt.grid(True, alpha=0.3)
        plt.tight_layout()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫
        plot_path = os.path.join(output_dir, "demo_diarization_plot.png")
        plt.savefig(plot_path, dpi=300, bbox_inches='tight')
        plt.close()
        
        print(f"–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {plot_path}")
    
    @staticmethod
    def create_large_demo_file(output_path: str, size_mb: int = 150):
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞"""
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –Ω—É–∂–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        # WAV 16kHz –º–æ–Ω–æ ~ 32 kB/—Å–µ–∫
        duration = size_mb * 1024 * 1024 / (16000 * 2)  # 2 –±–∞–π—Ç–∞ –Ω–∞ —Å—ç–º–ø–ª
        
        print(f"–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Ä–∞–∑–º–µ—Ä–æ–º {size_mb} –ú–ë (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration/60:.1f} –º–∏–Ω—É—Ç)...")
        
        # –°–æ–∑–¥–∞–µ–º –±–æ–ª–µ–µ –¥–ª–∏–Ω–Ω—ã–π —Ñ–∞–π–ª
        DemoDataGenerator.create_demo_audio_file(output_path, duration, 16000)

def create_demo_environment():
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    
    print("üéµ –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è AudioQA")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –¥–µ–º–æ –¥–∞–Ω–Ω—ã—Ö
    demo_dir = Path("demo_data")
    demo_dir.mkdir(exist_ok=True)
    
    # –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
    generator = DemoDataGenerator()
    
    # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏
    print("\n1. –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
    demo_df = generator.create_demo_diarization_results()
    generator.export_demo_results(demo_df, demo_dir)
    
    # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª
    print("\n2. –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞...")
    audio_path = demo_dir / "demo_audio.wav"
    generator.create_demo_audio_file(str(audio_path))
    
    # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
    print("\n3. –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏...")
    generator.create_demo_visualization(demo_df, demo_dir)
    
    print("\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!")
    print(f"üìÅ –í—Å–µ —Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ: {demo_dir}")
    print("\n–î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:")
    print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: streamlit run audio_diarization_app.py")
    print("2. –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª demo_audio.wav —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É Browse –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å:")
    print(f"   {demo_dir / 'demo_audio.wav'}")
    print("3. –°—Ä–∞–≤–Ω–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å —Ñ–∞–π–ª–æ–º demo_diarization_results.csv")
    
    # –û–ø—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –±–æ–ª—å—à–æ–≥–æ —Ñ–∞–π–ª–∞
    print("\n" + "="*50)
    create_large = input("–°–æ–∑–¥–∞—Ç—å –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è? (y/N): ").lower().strip()
    if create_large in ['y', 'yes', '–¥–∞']:
        try:
            size_mb = int(input("–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ –ú–ë (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 150): ") or "150")
            large_audio_path = demo_dir / f"demo_large_{size_mb}mb.wav"
            generator.create_large_demo_file(str(large_audio_path), size_mb)
            print(f"‚úÖ –ë–æ–ª—å—à–æ–π —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {large_audio_path}")
        except ValueError:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")

if __name__ == "__main__":
    create_demo_environment() 